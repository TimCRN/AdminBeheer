name: Docker

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: adminmanagement

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file AdminManagement/Dockerfile
          fi

  # Push image to GitHub Packages & Docker Hub.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    environment:
      name: Production

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v2        

      - name: Build image
        run: docker build . --file AdminManagement/Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push 2 Packages 
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "development" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          
      - name: Log into Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Push 2 Hub        
        uses: docker/build-push-action@v2
        with:
          context: .
          file: AdminManagement/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/adminmanagement:latest
          
  deploy:
    needs: push
    
    runs-on: ubuntu-latest
    
    environment:
      name: Production
      
    steps:
      - uses: actions/checkout@v2
      
      - name: Throw SSH Commands
        uses: appleboy/ssh-action@master
        with:
          script: |
            docker pull timcrn/adminmanagement:latest
            docker stop adminmanagement
            docker rm adminmanagement
            docker run --name=adminmanagement --restart=always
